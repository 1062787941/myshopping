<?xml version="1.0" encoding="UTF-8"?>
<beans 
      xmlns="http://www.springframework.org/schema/beans"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:context="http://www.springframework.org/schema/context"
      xmlns:aop="http://www.springframework.org/schema/aop"
      xmlns:tx="http://www.springframework.org/schema/tx"
	  xmlns:mvc="http://www.springframework.org/schema/mvc"
		
      xsi:schemaLocation="
	
	  http://www.springframework.org/schema/beans 
	  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	  
	  http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-3.0.xsd
 	  
	  http://www.springframework.org/schema/aop 
	  http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	  
	  http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    
      http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        
      ">
      
       <!-- 配置C3P0连接池,目的：管理数据库连接 -->
      <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close" >
      		<property name="driverClass" value="com.mysql.jdbc.Driver"/>
      		<property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:3306/shop"/>
      		<property name="user" value="root"/>
      		<property name="password" value="root"/>
      </bean>
      
      <!-- 配置SqlSessionFactoryBean，目的：加载mybaits配置文件和映射文件，即替代原Mybatis工具类的作用 -->
      <bean id="sqlSessionFactoryBeanID" class="org.mybatis.spring.SqlSessionFactoryBean">
      		<property name="configLocation" value="classpath:mybatis.xml"/>
      		<property name="dataSource" ref="dataSource"/>
      </bean>
 
      <!-- 配置Mybatis的事务管理器，即因为Mybatis底层用的是JDBC事务管事器，所以在这里依然配置JDBC事务管理器 -->
      <bean id="dataSourceTransactionManagerID" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
      		<property name="dataSource" ref="dataSource"/>
      </bean>
      
      <!-- 用户注入 -->
      <bean id="userDao" class="user.dao.UserDaoImpl">
      	<property name="sqlSessionFactory" ref="sqlSessionFactoryBeanID"></property>
      </bean>
      <bean id="userServiceID" class="user.service.UserServiceimpl">
      	<property name="userDao" ref="userDao"></property>
      </bean>
      
      <!-- 管理员注入 -->
      <bean id="adminDao" class="admin.dao.AdminDaoImpl">
      	<property name="factory" ref="sqlSessionFactoryBeanID"></property>
      </bean>
      <bean id="adminServiceID" class="admin.service.AdminService">
      	<property name="adminDao" ref="adminDao"></property>
      </bean>
      
      <!-- 订单的注入 -->
      <bean id="orderDao" class="orders.dao.OrderDaoImpl">
      		<property name="sqlSessionFactory" ref="sqlSessionFactoryBeanID"></property>
      </bean>
      
      <!-- 一级目录 -->
      <bean id="categoryDao" class="category.dao.CategoryDaoImpl">
      		<property name="sessionFactory" ref="sqlSessionFactoryBeanID"></property>
      </bean>
      <bean id="categoryServiceID" class="category.service.CategoryService">
      		<property name="categoryDao" ref="categoryDao"></property>
      </bean>
      
      <!-- 二级目录 -->
      <bean id="categorySecondDao" class="categorysecond.dao.CategorySecondDaoImpl">
      		<property name="sessionFactory" ref="sqlSessionFactoryBeanID"></property>
      </bean>
      <bean id="categorySecondServiceID" class="categorysecond.service.CategorySecondService">
      		<property name="categorySecondDao" ref="categorySecondDao"></property>
      </bean>
      
      <!-- 商品 -->
      <bean id="productDao" class="product.dao.ProductDaoImpl">
      		<property name="sessionFactory" ref="sqlSessionFactoryBeanID"></property>
      </bean>
      <bean id="productServiceID" class="product.service.ProductServiceImpl">
      		<property name="dao" ref="productDao"></property>
      </bean>
      
<!--       配置事务通知，即让哪些方法需要事务支持
      <tx:advice id="tx" transaction-manager="dataSourceTransactionManagerID">
      		<tx:attributes>
      			<tx:method name="*" propagation="REQUIRED"/>
      		</tx:attributes>
      </tx:advice> -->
      
  <!--     配置事务切面，即让哪些包下的类需要事务
      <aop:config>
      		<aop:pointcut id="pointcut" expression="execution(* cn.itcast.javaee.mybatis.dao.*.*(..))"/>
     		<aop:advisor advice-ref="tx" pointcut-ref="pointcut"/>
      </aop:config> -->
      
		<!--  注册Action -->
      <context:component-scan base-package="*.action"/>

	  <!-- 通知springioc容器这些注解的作用 -->
      <context:annotation-config />
      
    <!-- 首页的问题 -->
	<!-- 专用于jsp到jsp/html的转发控制器 -->
   	<!-- 首页访问的Action -->

      
    <!-- 下面两个配合上面的ParameterizableViewController注解，不然报错-->
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" />
    <bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter" />
    <!-- 用户登录跳转 -->
    <bean name="/login.action" class="org.springframework.web.servlet.mvc.ParameterizableViewController">
    	<property name="viewName" value="/user/login"/>
    </bean>
    <!-- 用户注册跳转 -->
    <bean name="/regist.action" class="org.springframework.web.servlet.mvc.ParameterizableViewController">
    	<property name="viewName" value="/user/regist"/>
    </bean>
    
    
 	 <!--视图解析器-->
      <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
      		<property name="suffix" value=".jsp"/>
      </bean>
      
        <!-- json数据 -->
		<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
			<property name="messageConverters">
					<list>
						<bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"/>
					</list>
			</property>
		 </bean>
         
        
      <!-- 验证码图片 -->
      <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
      	<property name="config">
      		<bean class="com.google.code.kaptcha.util.Config">
      			<constructor-arg type="java.util.Properties">
      				<props>
      					<prop key="kaptcha.image.width">100</prop>
      					<prop key="kaptcha.image.height">50</prop> 
      					<prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop> 
      					<prop key="kaptcha.textproducer.char.string">0123456789abcdefghijklmnopqrstuvwxyz</prop>  
      					<prop key="kaptcha.textproducer.char.length">4</prop>
      				</props>
      			</constructor-arg>
      		</bean>
      	</property>
      </bean>
      
</beans>      